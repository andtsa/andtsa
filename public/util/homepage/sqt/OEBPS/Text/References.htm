<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xml:lang="en"
      lang="en"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Effective Software Testing</title>
<link rel="stylesheet" type="text/css" href="../../override_v1.css"/>
<link rel="stylesheet" type="text/css" href="../../stylesheet.css"/><link rel="stylesheet" type="text/css" href="../../page_styles.css"/>
</head>
<body>
<div id="book-content">
<div id="sbo-rt-content" class="calibre"><h1 class="tochead" id="heading_id_2"><a id="pgfId-1044071"></a>References</h1>

  <p class="fm-head-2toc">  </p>

  <p class="fm-reference"><a id="pgfId-1044072"></a>Aniche, Maurício, and Marco Aurélio Gerosa. 2015. “Does Test-Driven Development Improve Class Design? A Qualitative Study on Developers’ Perceptions.” <i class="fm-italics">Journal of the Brazilian Computer Society</i> 21 (1): 1–11.</p>

  <p class="fm-reference"><a id="pgfId-1044073"></a>Aniche, Maurício, Eduardo Guerra, and Marco Aurélio Gerosa. 2014. “Improving Code Quality on Automated Tests of Web Applications: A Set of Patterns.” In <i class="fm-italics">21st Conference on Pattern Languages of Programs (PLOP)</i>.</p>

  <p class="fm-reference"><a id="pgfId-1044074"></a>Aniche, Maurício, Christoph Treude, and Andy Zaidman. 2021. “How Developers Engineer Test Cases: An Observational Study.” <i class="fm-italics">Transactions on Software Engineering (TSE)</i>. <a class="url" href="https://arxiv.org/abs/2103.01783">https://arxiv.org/abs/2103.01783</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044075"></a>Arguelles, Carlos, Marko Ivankovic, and Adam Bender. 2020. “Google Testing Blog: Code Coverage Best Practices.” <a class="url" href="https://testing.googleblog.com/2020/08/code-coverage-best-practices.html">https://testing.googleblog.com/2020/08/code-coverage-best-practices.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044076"></a>Baeldung, Eugen. 2020. “The Dao Pattern in Java.” <a class="url" href="http://www.baeldung.com/java-dao-pattern">www.baeldung.com/java-dao-pattern</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044077"></a>Beck, Kent. 2002. <i class="fm-italics">Test-Driven Development: By Example</i>. Addison-Wesley Professional.</p>

  <p class="fm-reference"><a id="pgfId-1044078"></a>Beck, Kent. 2019. “Test Desiderata.” <a class="url" href="https://medium.com/@kentbeck_7670/test-desiderata-94150638a4b3">https://medium.com/@kentbeck_7670/test-desiderata-94150638a4b3</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044079"></a>Beck, Kent, and Erich Gamma. 1998. “JUnit Test Infected: Programmers Love Writing Tests.” <i class="fm-italics">Java Report</i> 3 (7).</p>

  <p class="fm-reference"><a id="pgfId-1044081"></a>Bell, Jonathan, Owolabi Legunsen, Michael Hilton, Lamyaa Eloussi, Tifany Yung, and Darko Marinov. 2018. “DeFlaker: Automatically Detecting Flaky Tests.” In <i class="fm-italics">2018 IEEE/ACM 40th International Conference on Software Engineering (ICSE)</i>, 433–444. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044082"></a>Beller, Moritz, Georgios Gousios, Annibale Panichella, Sebastian Proksch, Sven Amann, and Andy Zaidman. 2019. “Developer Testing in the IDE: Patterns, Beliefs, and Behavior.” <i class="fm-italics">IEEE Transactions on Software Engineering</i> 45 (3): 261–284.</p>

  <p class="fm-reference"><a id="pgfId-1044083"></a>Black, Rex, Erik van Veenendaal, and Dorothy Graham. 2012. <i class="fm-italics">Foundations of Software Testing ISQTB Certification</i>, 3rd ed. Cengage Learning EMEA.</p>

  <p class="fm-reference"><a id="pgfId-1044084"></a>Bloch, Joshua. 2008. <i class="fm-italics">Effective Java (The Java Series)</i>. Prentice Hall PTR.</p>

  <p class="fm-reference"><a id="pgfId-1044085"></a>Boehm, Barry W., and Philip N. Papaccio. 1988. “Understanding and Controlling Software Costs.” <i class="fm-italics">IEEE Transactions on Software Engineering</i> 14 (10): 1462–1477.</p>

  <p class="fm-reference"><a id="pgfId-1044086"></a>Bouwers, Eric, Joost Visser, and Arie Van Deursen. 2012. “Getting What You Measure.” <i class="fm-italics">Communications of the ACM</i> 55 (7).</p>

  <p class="fm-reference"><a id="pgfId-1044087"></a>Cândido, Jeanderson, Jan Haesen, Maurício Aniche, and Arie van Deursen. 2021. “An Exploratory Study of Log Placement Recommendation in an Enterprise System.” In <i class="fm-italics">Proceedings of the 2021 Mining Software Repositories Conference</i>. ACM.</p>

  <p class="fm-reference"><a id="pgfId-1044088"></a>Chen, Yiqun T., Rahul Gopinath, Anita Tadakamalla, Michael D. Ernst, Reid Holmes, Gordon Fraser, Paul Ammann, and René Just. 2020. “Revisiting the Relationship Between Fault Detection, Test Adequacy Criteria, and Test Set Size.” In <i class="fm-italics">Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering</i>. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044089"></a>Chilenski, John Joseph. 2001. “Investigation of Three Forms of the Modified Condition Decision Coverage (MCDC) Criterion.” DOT/FAA/AR-01/18. United States Federal Aviation Administration, Office of Aviation Research.</p>

  <p class="fm-reference"><a id="pgfId-1044090"></a>Cockburn, Alistair. 2005. “Hexagonal Architecture.” <a class="url" href="https://alistair.cockburn.us/hexagonal-architecture">https://alistair.cockburn.us/hexagonal-architecture/</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044091"></a>Dogša, Tomaž, and David Baticˇ. 2011. “The Effectiveness of Test-Driven Development: An Industrial Case Study.” <i class="fm-italics">Software Quality Journal</i> 19 (4): 643–661.</p>

  <p class="fm-reference"><a id="pgfId-1044092"></a>Encyclopedia.com. 2020. “Roman Numerals: Their Origins, Impact, and Limitations.” <a class="url" href="https://www.encyclopedia.com/science/encyclopedias-almanacs-transcripts-and-maps/roman-numerals-their-origins-impact-and-limitations">https://www.encyclopedia.com/science/encyclopedias-almanacs-transcripts-and-maps/roman-numerals-their-origins-impact-and-limitations</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044093"></a>Erdogmus, Hakan, Maurizio Morisio, and Marco Torchiano. 2005. “On the Effectiveness of the Test-First Approach to Programming.” <i class="fm-italics">IEEE Transactions on Software Engineering</i> 31 (3): 226–237.</p>

  <p class="fm-reference"><a id="pgfId-1044094"></a>Evans, Eric. 2004. <i class="fm-italics">Domain-Driven Design: Tackling Complexity in the Heart of Software</i>. Addison-Wesley Professional.</p>

  <p class="fm-reference"><a id="pgfId-1044095"></a>Feathers, Michael. 2004. <i class="fm-italics">Working Effectively with Legacy Code</i>. Pearson.</p>

  <p class="fm-reference"><a id="pgfId-1044096"></a>Feathers, Michael. 2008. “The Flawed Theory Behind Unit Testing.” <a class="url" href="https://michaelfeathers.typepad.com/michael_feathers_blog/2008/06/the-flawed-theo.html">https://michaelfeathers.typepad.com/michael_feathers_blog/2008/06/the-flawed-theo.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044097"></a>Feathers, Michael. 2013. “The Deep Synergy Between Testability and Good Design.” <a class="url" href="https://www.youtube.com/watch?v=4cVZvoFGJTU">https://www.youtube.com/watch?v=4cVZvoFGJTU</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044098"></a>Feathers, Michael, and Steve Freeman. 2009. “Test Driven Development: Ten Years Later.” InfoQ. <a class="url" href="http://www.infoq.com/presentations/tdd-ten-years-later">http://www.infoq.com/presentations/tdd-ten-years-later</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044099"></a>Ferrari, Fabiano Cutigi, Alessandro Viola Pizzoleto, and Jeff Offutt. 2018. “A Systematic Review of Cost Reduction Techniques for Mutation Testing: Preliminary Results.” In <i class="fm-italics">Proceedings of the IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)</i>. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044100"></a>Fowler, Martin. “ClockWrapper.” <a class="url" href="https://martinfowler.com/bliki/ClockWrapper.html">https://martinfowler.com/bliki/ClockWrapper.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044101"></a>Fowler, Martin. 2003. “User Journey Test.” <a class="url" href="http://www.martinfowler.com/bliki/UserJourneyTest.html">www.martinfowler.com/bliki/UserJourneyTest.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044102"></a>Fowler, Martin. 2005. “Command-Query Separation.” <a class="url" href="http://www.martinfowler.com/bliki/CommandQuerySeparation.html">www.martinfowler.com/bliki/CommandQuerySeparation.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044103"></a>Fowler, Martin. 2007. “Mocks Aren’t Stubs.” <a class="url" href="http://martinfowler.com/articles/mocksArentStubs.html">martinfowler.com/articles/mocksArentStubs.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044104"></a>Fowler, Martin. 2021. “On the Diverse and Fantastical Shapes of Testing.” <a class="url" href="http://martinfowler.com/articles/2021-test-shapes.html">martinfowler.com/articles/2021-test-shapes.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044105"></a>Freeman, Steve, and Nat Pryce. 2009. <i class="fm-italics">Growing Object-Oriented Software, Guided by Tests</i>. Pearson Education.</p>

  <p class="fm-reference"><a id="pgfId-1044106"></a>Freeman, Steve, Tim Mackinnon, Nat Pryce, and Joe Walnes. 2004. “Mock Roles, Not Objects.” In <i class="fm-italics">Companion to the 19th Annual ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages, and Applications</i>, 236–246. ACM.</p>

  <p class="fm-reference"><a id="pgfId-1044107"></a>Fucci, Davide, Hakan Erdogmus, Burak Turhan, Markku Oivo, and Natalia Juristo. 2016. “A Dissection of the Test-Driven Development Process: Does It Matter to Test-First or to Test-Last?” <i class="fm-italics">IEEE Transactions on Software Engineering</i> 43 (7): 597–14.</p>

  <p class="fm-reference"><a id="pgfId-1044108"></a>Gamma, E., R. Helm, R., Johnson, and J. Vlissides. 1993. “Design Patterns: Abstraction and Reuse of Object-Oriented Design.” In <i class="fm-italics">European Conference on Object-Oriented Programming</i>, 406–431.</p>

  <p class="fm-reference"><a id="pgfId-1044109"></a>Garousi, Vahid, and Barıs¸ Küçük. 2018. “Smells in Software Test Code: A Survey of Knowledge in Industry and Academia.” <i class="fm-italics">Journal of Systems and Software</i> 138: 52–81.</p>

  <p class="fm-reference"><a id="pgfId-1044110"></a>George, Boby, and Laurie Williams. 2003. “An Initial Investigation of Test Driven Development in Industry.” In <i class="fm-italics">Proceedings of the 2003 ACM Symposium on Applied Computing</i>, 1135–1139. ACM.</p>

  <p class="fm-reference"><a id="pgfId-1044111"></a>Google. 2016. “OSS-Fuzz: Continuous Fuzzing for Open Source Software.” <a class="url" href="https://github.com/google/oss-fuzz">https://github.com/google/oss-fuzz</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044112"></a>Gopinath, Rahul, Carlos Jensen, and Alex Groce. 2014. “Code Coverage for Suite Evaluation by Developers.” In <i class="fm-italics">Proceedings of the 36th International Conference on Software Engineering</i>. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044113"></a>Grenning, James W. 2011. <i class="fm-italics">Test Driven Development for Embedded C</i>. Pragmatic Bookshelf.</p>

  <p class="fm-reference"><a id="pgfId-1044114"></a>Hammarberg, Marcus, and Joakim Sundén. 2014. <i class="fm-italics">Kanban in Action</i>. Manning Publications.</p>

  <p class="fm-reference"><a id="pgfId-1044115"></a>Harman, Mark, and Peter O’Hearn. 2018. “From Start-Ups to Scale-Ups: Opportunities and Open Problems for Static and Dynamic Program Analysis.” In <i class="fm-italics">IEEE 18th International Working Conference on Source Code Analysis and Manipulation (SCAM)</i>, 1–23. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044116"></a>Hayhurst, Kelly J. 2001. “A Practical Tutorial on Modified Condition/Decision Coverage.” <a class="url" href="https://shemesh.larc.nasa.gov/fm/papers/Hayhurst-2001-tm210876-MCDC.pdf">https://shemesh.larc.nasa.gov/fm/papers/Hayhurst-2001-tm210876-MCDC.pdf</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044117"></a>Hermans, Felienne. 2021. <i class="fm-italics">The Programmer’s Brain: What Every Programmer Needs to Know About Cognition</i>. Manning Publications.</p>

  <p class="fm-reference"><a id="pgfId-1044118"></a>Hipp, Richard. 2021. “The Untold Story of SQLite.” <a class="url" href="https://corecursive.com/066-sqlite-with-richard-hipp">https://corecursive.com/066-sqlite-with-richard-hipp</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044119"></a>Hutchins, Monica, Herb Foster, Tarak Goradia, and Thomas Ostrand. 1994. “Experiments on the Effectiveness of Dataflow- and Control-Flow-Based Test Adequacy Criteria.” In <i class="fm-italics">Proceedings of 16th International Conference on Software Engineering.</i> IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044120"></a>Inozemtseva, Laura, and Reid Holmes. 2014. “Coverage Is Not Strongly Correlated with Test Suite Effectiveness.” In <i class="fm-italics">Proceedings of the 36th International Conference on Software Engineering.</i> IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044121"></a>Janzen, David S. 2005. “Software Architecture Improvement Through Test-Driven Development.“ In <i class="fm-italics">Companion to the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications</i>, 240–241. ACM.</p>

  <p class="fm-reference"><a id="pgfId-1044122"></a>Janzen, David S., and Hossein Saiedian. 2006. “On the Influence of Test-Driven Development on Software Design.” In <i class="fm-italics">19th Conference on Software Engineering Education &amp; Training (CSEET’06)</i>, 141–148. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044123"></a>Jeng, Bingchiang, and Elaine J. Weyuker. 1994. “A Simplified Domain-Testing Strategy.” <i class="fm-italics">ACM Transactions on Software Engineering and Methodology (TOSEM)</i> 3 (3): 254–270.</p>

  <p class="fm-reference"><a id="pgfId-1044124"></a>Kaner, Cem, Sowmya Padmanabhan, and Douglas Hoffman. 2013. <i class="fm-italics">The Domain Testing Workbook</i>. Context Driven Press.</p>

  <p class="fm-reference"><a id="pgfId-1044125"></a>Khomh, Foutse, Massimiliano Di Penta, and Yann-Gael Gueheneuc. 2009. “An Exploratory Study of the Impact of Code Smells on Software Change-Proneness.” In <i class="fm-italics">16th Working Conference on Reverse Engineering</i>, 75–84. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044126"></a>Lam, Wing, Reed Oei, August Shi, Darko Marinov, and Tao Xie. 2019. “iDFlakies: A Framework for Detecting and Partially Classifying Flaky Tests.” In <i class="fm-italics">12th IEEE Conference on Software Testing, Validation and Verification (ICST)</i>, 312–322. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044127"></a>Langr, Jeff, Andy Hunt, and Dave Thomas. 2015. <i class="fm-italics">Pragmatic Unit Testing in Java 8 with JUnit</i>. Pragmatic Bookshelf.</p>

  <p class="fm-reference"><a id="pgfId-1044128"></a>Lehman, Meir M. 1980. “Programs, Life Cycles, and Laws of Software Evolution.” <i class="fm-italics">Proceedings of the IEEE</i> 68 (9): 1060–1076.</p>

  <p class="fm-reference"><a id="pgfId-1044129"></a>Liskov, Barbara H., and Jeannette M. Wing. 1994. “A Behavioral Notion of Subtyping.” <i class="fm-italics">ACM Transactions on Programming Languages and Systems (TOPLAS)</i> 16 (6): 1811–1841.</p>

  <p class="fm-reference"><a id="pgfId-1044130"></a>Liskov, Barbara. 1987. “Keynote Address—Data Abstraction and Hierarchy.” In <i class="fm-italics">Addendum to the Proceedings on Object-Oriented Programming Systems, Languages, and Applications</i>. ACM.</p>

  <p class="fm-reference"><a id="pgfId-1044131"></a>Luo, Qingzhou, Farah Hariri, Lamyaa Eloussi, and Darko Marinov. 2014. “An Empirical Analysis of Flaky Tests.” In <i class="fm-italics">Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering</i>, 643–653. ACM.</p>

  <p class="fm-reference"><a id="pgfId-1044132"></a>Mancuso, Sandro. 2018. “Does TDD Lead to Good Design?” <a class="url" href="https://www.youtube.com/watch?v=KyFVA4Spcgg&amp;t=195s">https://www.youtube.com/watch?v=KyFVA4Spcgg&amp;t=195s</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044133"></a>Mao, Ke. 2018. “Sapienz: Intelligent Automated Software Testing at Scale.” 2018. <a class="url" href="https://engineering.fb.com/2018/05/02/developer-tools/sapienz-intelligent-automated-software-testing-at-scale">https://engineering.fb.com/2018/05/02/developer-tools/sapienz-intelligent-automated-software-testing-at-scale</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044134"></a>Marick, Brian. 2014. “Ten Years of TDD.” <a class="url" href="http://c2.com/cgi/wiki?TenYearsOfTestDrivenDevelopment">http://c2.com/cgi/wiki?TenYearsOfTestDrivenDevelopment</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044135"></a>Martin, Robert C. 1996. “The Dependency Inversion Principle.” <i class="fm-italics">C++ Report</i> 8 (6).</p>

  <p class="fm-reference"><a id="pgfId-1044136"></a>Martin, Robert C. 2014. “The Open Closed Principle.” <a class="url" href="https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html">https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044137"></a>Martin, Robert C. 2014. “The Single Responsibility Principle.” <a class="url" href="https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html">https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044138"></a>Martin, Robert C. 2018. <i class="fm-italics">Clean Architecture: A Craftsman’s Guide to Software Structure and Design</i>. Prentice Hall.</p>

  <p class="fm-reference"><a id="pgfId-1044139"></a>Martin, Robert C., and Micah Martin. 2006. <i class="fm-italics">Agile Principles, Patterns, and Practices in C#</i>. Prentice Hall PTR.</p>

  <p class="fm-reference"><a id="pgfId-1044140"></a>Meszaros, Gerard. 2007. <i class="fm-italics">XUnit Test Patterns: Refactoring Test Code</i>. Pearson Education.</p>

  <p class="fm-reference"><a id="pgfId-1044141"></a>Meyer, Bertrand. 1992. “Applying ‘Design by Contract’.” <i class="fm-italics">Computer</i> 25 (10): 40–51.</p>

  <p class="fm-reference"><a id="pgfId-1044142"></a>Meyer, Bertrand. 1997. <i class="fm-italics">Object-Oriented Software Construction</i>, vol. 2. Prentice Hall Englewood Cliffs.</p>

  <p class="fm-reference"><a id="pgfId-1044143"></a>Micco, John. 2016. “Flaky Tests at Google and How We Mitigate Them.” <a class="url" href="https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html">https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044144"></a>Mockito. 2019. “How to Write Good Tests.” <a class="url" href="https://github.com/mockito/mockito/wiki/How-to-write-good-tests">https://github.com/mockito/mockito/wiki/How-to-write-good-tests</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044145"></a>Müeller, Matthias M., and Oliver Hagner. 2002. “Experiment About Test-First Programming.” <i class="fm-italics">IEEE Proceedings—Software</i> 149 (5).</p>

  <p class="fm-reference"><a id="pgfId-1044146"></a>Nagappan, Nachiappan, E. Michael Maximilien, Thirumalesh Bhat, and Laurie Williams. 2008. “Realizing Quality Improvement Through Test Driven Development: Results and Experiences of Four Industrial Teams.” <i class="fm-italics">Empirical Software Engineering</i> 13 (3): 289–302.</p>

  <p class="fm-reference"><a id="pgfId-1044147"></a>Namin, Akbar Siami, and James H. Andrews. 2009. “The Influence of Size and Coverage on Test Suite Effectiveness.” In <i class="fm-italics">Proceedings of the 18th International Symposium on Software Testing and Analysis</i>. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044148"></a>Netflix. 2020. “Ready for Changes with Hexagonal Architecture.” <a class="url" href="https://netflixtechblog.com/ready-for-changes-with-hexagonal-architecture-b315ec967749">https://netflixtechblog.com/ready-for-changes-with-hexagonal-architecture-b315ec967749</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044149"></a>Oracle. 2020. Java Language Specification: The assert Statement. <a class="url" href="https://docs.oracle.com/javase/specs/jls/se15/html/jls-14.html#jls-14.10">https://docs.oracle.com/javase/specs/jls/se15/html/jls-14.html#jls-14.10</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044150"></a>Osherove, Roy. 2009. <i class="fm-italics">The Art of Unit Testing: With Examples in .NET</i>. Manning Publications.</p>

  <p class="fm-reference"><a id="pgfId-1044151"></a>Ostrand, Thomas J., and Marc J. Balcer. 1988. “The Category-Partition Method for Specifying and Generating Functional Tests.” <i class="fm-italics">Communications of the ACM</i> 31 (6): 676–686.</p>

  <p class="fm-reference"><a id="pgfId-1044152"></a>Parsai, Ali, and Serge Demeyer. 2020. “Comparing Mutation Coverage against Branch Coverage in an Industrial Setting.” <i class="fm-italics">International Journal on Software Tools for Technology Transfer</i> 22 (4): 365–388.</p>

  <p class="fm-reference"><a id="pgfId-1044153"></a>Petrovic, Goran, and Marko Ivankovic. 2018. “State of Mutation Testing at Google.” In <i class="fm-italics">Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Practice</i>. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044154"></a>Pezzè, Mauro, and Michal Young. 2008. <i class="fm-italics">Software Testing and Analysis: Process, Principles, and Techniques</i>. John Wiley &amp; Sons.</p>

  <p class="fm-reference"><a id="pgfId-1044155"></a>Pryce, Nat. 2007. “Test Data Builders: An Alternative to the Object Mother Pattern.” <a class="url" href="http://www.natpryce.com/articles/000714.html">www.natpryce.com/articles/000714.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044156"></a>Regehr, John. 2014. “Use of Assertions.” <a class="url" href="https://blog.regehr.org/archives/1091">https://blog.regehr.org/archives/1091</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044157"></a>Schaffer, André. 2018. “Testing of Microservices.” <a class="url" href="https://engineering.atspotify.com/2018/01/11/testing-of-microservices">https://engineering.atspotify.com/2018/01/11/testing-of-microservices</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044158"></a>Schröter, Adrian, Thomas Zimmermann, and Andreas Zeller. 2006. “Predicting Component Failures at Design Time.” In <i class="fm-italics">Proceedings of the 2006 ACM/IEEE International Symposium on Empirical Software Engineering</i>. ACM.</p>

  <p class="fm-reference"><a id="pgfId-1044159"></a>Schuchert, Brett L. 2013. “DIP in the Wild.” <a class="url" href="http://www.martinfowler.com/articles/dipInTheWild.html">www.martinfowler.com/articles/dipInTheWild.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044160"></a>Shatnawi, Raed, and Wei Li. 2006. “An Investigation of Bad Smells in Object-Oriented Design.” In <i class="fm-italics">Third International Conference on Information Technology: New Generations (ITNG’06)</i>, 161–165. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044161"></a>Shore, James. 2014. “Let’s Play: Test-Driven Development.” <a class="url" href="https://www.youtube.com/playlist?list=PL0CCC6BD6AFF097B1">https://www.youtube.com/playlist?list=PL0CCC6BD6AFF097B1</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044162"></a>Shull, Forrest, Grigori Melnik, Burak Turhan, Lucas Layman, Madeline Diep, and Hakan Erdogmus. 2010. “What Do We Know About Test-Driven Development?” <i class="fm-italics">IEEE Software</i> 27 (6): 16–19.</p>

  <p class="fm-reference"><a id="pgfId-1044163"></a>Siniaalto, M., and P. Abrahamsson. 2007. “Does Test-Driven Development Improve the Program Code? Alarming Results from a Comparative Case Study.” In <i class="fm-italics">IFIP Central and East European Conference on Software Engineering Techniques</i>, 143–156.</p>

  <p class="fm-reference"><a id="pgfId-1044164"></a>Spadini, Davide, Maurício Aniche, Magiel Bruntink, and Alberto Bacchelli. 2019. “Mock Objects for Testing Java Systems.” <i class="fm-italics">Empirical Software Engineering</i> 24 (3): 1461–1498.</p>

  <p class="fm-reference"><a id="pgfId-1044165"></a>Spadini, Davide, Martin Schvarcbacher, Ana-Maria Oprescu, Magiel Bruntink, and Alberto Bacchelli. “Investigating Severity Thresholds for Test Smells.” 2020. In <i class="fm-italics">Proceedings of the 17th International Conference on Mining Software Repositories</i>. ACM.</p>

  <p class="fm-reference"><a id="pgfId-1044166"></a>Test Double. 2018. “London School TDD.” <a class="url" href="https://github.com/testdouble/contributing-tests/wiki/London-school-TDD">https://github.com/testdouble/contributing-tests/wiki/London-school-TDD</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044167"></a>Trautsch, Fabian, Steffen Herbold, and Jens Grabowski. 2020. “Are Unit and Integration Test Definitions Still Valid for Modern Java Projects? An Empirical Study on Open-Source Projects.” <i class="fm-italics">Journal of Systems and Software</i> 159.</p>

  <p class="fm-reference"><a id="pgfId-1044168"></a>Tuya, Javier, M. José Suárez-Cabal, and Claudio De La Riva. 2006. “A Practical Guide to SQL White-Box Testing.” <i class="fm-italics">ACM SIGPLAN Notices</i> 41 (4): 36–41.</p>

  <p class="fm-reference"><a id="pgfId-1044169"></a>Tuya, Javier, M. José Suárez-Cabal, and Claudio De La Riva. 2006. “SQLMutation: A Tool to Generate Mutants of SQL Database Queries.” In <i class="fm-italics">Second Workshop on Mutation Analysis (Mutation 2006 —ISSRE Workshops 2006)</i>. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044170"></a>Van Deursen, Arie, Leon Moonen, Alex Van Den Bergh, and Gerard Kok. 2001. “Refactoring Test Code.” In <i class="fm-italics">Proceedings of the 2nd International Conference on Extreme Programming and Flexible Processes in Software Engineering</i>.</p>

  <p class="fm-reference"><a id="pgfId-1044171"></a>Van Deursen, Steven, and Mark Seemann. 2019. <i class="fm-italics">Dependency Injection: Principles, Practices, and Patterns</i>. Manning Publications.</p>

  <p class="fm-reference"><a id="pgfId-1044172"></a>Vera-Pérez, Oscar Luis, Benjamin Danglot, Martin Monperrus, and Benoit Baudry. 2019. “A Comprehensive Study of Pseudo-Tested Methods.” <i class="fm-italics">Empirical Software Engineering</i> 24 (3): 1195–1225.</p>

  <p class="fm-reference"><a id="pgfId-1044173"></a>Vocke, Ham. 2018. “The Practical Testing Pyramid.” <a class="url" href="https://martinfowler.com/articles/practical-test-pyramid.html">https://martinfowler.com/articles/practical-test-pyramid.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044174"></a>Wilsenach, Rouan. 2017. “QA in Production.” <a class="url" href="https://martinfowler.com/articles/qa-in-production.html">https://martinfowler.com/articles/qa-in-production.html</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044175"></a>Winters, Titus, Tom Manshreck, and Hyrum Wright. 2020. <i class="fm-italics">Software Engineering at Google: Lessons Learned from Programming Over Time</i>. O’Reilly Media.</p>

  <p class="fm-reference"><a id="pgfId-1044176"></a>Yandrapally, Rahulkrishna, and Ali Mesbah. 2021. “Mutation Analysis for Assessing End-to-End Web Tests.” In <i class="fm-italics">Proceedings of the 37th International Conference on Software Maintenance and Evolution</i>. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044177"></a>Yu, Chak Shun, Christoph Treude, and Maurício Aniche. 2019. “Comprehending Test Code: An Empirical Study.” In <i class="fm-italics">Proceedings of the 2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)</i>. IEEE.</p>

  <p class="fm-reference"><a id="pgfId-1044179"></a>Zarechneva, Julia. 2021. “Reinventing the QA Process.” <a class="url" href="https://blog.picnic.nl/reinventing-the-qa-process-25854fee51f3">https://blog.picnic.nl/reinventing-the-qa-process-25854fee51f3</a>.</p>

  <p class="fm-reference"><a id="pgfId-1044180"></a>Zeller, Andreas, Raul Gopinath, Marcel Böhme, Gordon Fraser, and Christian Holler. 2022. <i class="fm-italics">The Fuzzing Book</i>. CISPA Helmholtz Center for Information Security.</p>

  <p class="fm-reference"><a id="pgfId-1047113"></a> </p>
</div>
</div>
</body>
</html>